function [Y,Xf,Af] = NeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 14-Nov-2016 16:02:28.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x4 cell 1, initial 4 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 4 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x4 cell 1, final 4 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 33.291133997;
x1_step1_gain = 0.014387308336662;
x1_step1_ymin = -1;

% Layer 1
b1 = [-0.89873132826006175;1.7700219940588464;0.93607814494301278;-0.53439562046154976;0.57478646110280096;0.50831868637903133;0.18489220602211293;-3.5987055280221858;-1.0309682079993145;3.8408489284104093];
IW1_1 = [-1.361632441239641 -4.1802678332457628 6.4375196314531866 -2.0260743734595557;-4.4845220437010767 1.1611249900148817 0.822023411904655 -0.59268520341081243;4.3211187780207556 -18.294513789892644 11.904600327651659 1.1911582513416232;-1.9097555654974265 1.1724085102762936 -1.4069184765312235 -1.1917663064053017;13.859725071353719 -5.2749826577557455 -15.458228616554905 4.1876661274647953;1.8311317788296364 -0.89624049556748497 1.1911683575079972 1.4269025792515864;-7.1071022753155928 8.6715446874833564 -6.1517589305320781 5.1066685540066414;4.7609614482877554 -1.1148399677308201 -8.3679109346388021 2.0323950370203847;-4.8642804791536527 19.786912902461232 -12.499404795289999 -1.5128061234910655;-4.163944079435101 -0.47040118049560364 10.162809890400869 -2.4719013974924335];

% Layer 2
b2 = -0.20760412281661644;
LW2_1 = [-0.42959379818427401 -0.30277821767592833 2.8229450584530249 -2.6252609541400935 -0.079571257619626176 -2.3556508377211718 -0.25199803990623704 2.0807698444803706 2.6802677326770006 2.0970690763716586];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.014387308336662;
y1_step1_xoffset = 33.291133997;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,5);
for ts=1:4
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+3,5)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4]-1,5)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
finalxts = TS+(1: 4);
xits = finalxts(finalxts<=4);
xts = finalxts(finalxts>4)-4;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
